@using Common;
@using Common.DTO;
@using Newtonsoft.Json;
@using marketioBlazor.Authentication;
@using RestSharp;
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject ApiClientService ApiClient

<EditForm Model="loginDTO" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-group d-grid gap-2">
        <label for="email">Email address</label>
        <InputText @bind-Value="loginDTO.Email" type="text" class="form-control" id="email" placeholder="Enter email"/>
        <ValidationMessage For="@(() => loginDTO.Email)" />

        <label for="password">Password</label>
        <input @bind="loginDTO.PasswordHash" type="password" class="form-control" id="password" placeholder="Password"/>
        <ValidationMessage For="@(() => loginDTO.PasswordHash)" />
    </div>

    @*submit button*@
    <button type="submit" class="btn btn-secondary my-3">
        Login
    </button>

    <br/>

    @*error message display *@
    <label class="text-danger fw-bold">@errorMessage</label>

    Don't have an account?
    <NavLink class="" href="register">
        Register
    </NavLink>

</EditForm>

@code {

    private EditContext? editContext;
    private LoginDTO loginDTO = new LoginDTO();
    private string errorMessage = "";

    protected override void OnInitialized()
    {
        editContext = new(loginDTO);
    }

    private async void HandleValidSubmit()
    {
        try
        {
            if (editContext != null && editContext.Validate())
            {
                await Authenticate();
            }
        }
        catch { }
    }

    private async Task Authenticate()
    {
        ApiClient = new ApiClientService();
        try
        {
            var loginResponse = await ApiClient.LogUserInAsync(loginDTO);

            if (loginResponse.IsSuccessStatusCode)
            {

                var userSession = JsonConvert.DeserializeObject<UserSessionDTO>(loginResponse.Content);
                var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                await customAuthStateProvider.UpdateAuthenticationState(userSession);
                navManager.NavigateTo("/", true);
            }    
            else if (loginResponse.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                errorMessage = "Username of password is incorrect.";
            }
        }
        catch
        {
            errorMessage = "An error occured.";
        }
          
    }
}