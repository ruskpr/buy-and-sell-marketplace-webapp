@using BlazorInputFile;
@using Common;
@using Common.DTO;
@using Common.Helpers;
@using Newtonsoft.Json;
@using marketioBlazor.Authentication;
@using RestSharp;
@using marketioBlazor.Components.UI
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject ApiClientService ApiClient
@inject IToastService toastService

<EditForm Model="_listing" OnValidSubmit="@HandleValidSubmit" class="">
    <DataAnnotationsValidator />
    @*<ValidationSummary />*@

    <div class="form-group d-grid gap-2">
        @*title*@
        <label for="email">Title</label>
        <InputText class="form-control" id="email" @bind-Value="_listing.Title" placeholder="enter your title here" />
        <ValidationMessage For="@(() => _listing.Title)" />

        @*first name*@
        <label for="description">Description</label>
        <InputText class="form-control" id="firstName" @bind-Value="_listing.Description" placeholder="description" />
        <ValidationMessage For="@(() => _listing.Description)" />

        @* category *@
        <label for="category">Category</label>
        <InputSelect class="form-select" id="category"  @bind-Value="_listing.CategoryId">
            @foreach (var category in _listingCategories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>


        @* Price *@
        <label class="">Price</label>
        <div class="input-group m-0 p-0">
            <span class="input-group-text">$</span>
            <input disabled="@_listing.IsNegotiable" type="number" class="form-control" @bind-value="_listing.Price" aria-label="Amount (to the nearest dollar)">
            <span class="input-group-text">.00</span><br/>
        </div>
        <ValidationMessage For="@(() => _listing.Price)" />

        @* is negotiable*@
        <div class="d-flex gap-3">
            <span class="form-label">Price is Negotiable?</span>
            <InputCheckbox @onclick="(() => {
                        if (_listing.IsNegotiable)
                            _listing.Price = 0;
                        })" 
            @bind-Value="_listing.IsNegotiable" class="form-check-input" id="isNegotiable" />
        </div>

        @* tags *@
        <div>
            <label for="tags">Tags &nbsp;<span class="text-muted">(enter space separated values below)</span></label>
            <InputText class="form-control" id="tags"  maxLength="50"
            @bind-Value="_tagString" placeholder="enter your tags here" />
            <small id="emailHelp" class="form-text text-muted">Tags will help other users when searching for your listing.</small
            <div class="mt-3">
                Selected Tags:
                @if (_tagString.Length == 0)
                {
                     <span>none</span>
                }
                else
                {
                    @foreach (var tag in _tagString.Split(' '))
                    {
                        <span class=" me-2 badge rounded-pill bg-info">@tag</span>
                    }
                }
                
            </div>
        </div>

        <br/>

        @* image selector *@
        <label for="Images">Listing Images &nbsp;<span class="text-muted">(maximum of 10 images)</span></label>
        <BlazorInputFile.InputFile class="form-control bg-info" id="image" OnChange="HandleImageSelected" accept="image/*" />
        <br/>
        Selected Images: &nbsp;
        <div class="d-flex flex-wrap">
            @if (_photoUrls.Count == 0) { <span>none</span> }
            @for(int i = 1; i <= _photoUrls.Count; i++)
            {
                <div class="position-relative">
                    <span class="position-absolute end-0 badge rounded-pill bg-info">@i</span>
                    <img src="@_photoUrls[i-1]" style="max-height: 200px;" class="m-2"/>
                </div>
            }
        </div>
    </div>

    <br/>
    <br/>

    @*submit button*@
    <button type="submit" class="btn btn-primary my-3">
        Create
    </button>

    @*error message display *@
    <label class="text-danger fw-bold ps-3">@errorMessage</label>

</EditForm>

@code {
    #region 

    private EditContext? editContext;
    private string errorMessage = "";
    private Listing _listing = new Listing();
    string _tagString = "";
    private List<ListingTag> _tags;

    // data to fill dropdown box
    private List<ListingCategory> _listingCategories = new List<ListingCategory>();

    private string _photoUrl = "";
    private List<string> _photoUrls = new List<string>();


    private bool _processing = false;
    #endregion

    protected override async Task OnInitializedAsync()
    {
        editContext = new(_listing);

        // get categories with api
        ApiClient = new ApiClientService();
        _listingCategories = await ApiClient.GetAllAsync<ListingCategory>("listingcategories");
    }

    private async void HandleValidSubmit()
    {
        try
        {
            if (editContext != null && editContext.Validate())
            {
                if (_processing) return;

                _processing = true;
                // get user from session
                var authState = (CustomAuthenticationStateProvider)authStateProvider;
                UserSessionDTO userSession = await authState.GetToken();

                if (userSession == null)
                {
                    errorMessage = "Invalid session.";
                    return;
                }

                // set category 
                _listing.Category = _listingCategories.FirstOrDefault(x => x.Id == _listing.CategoryId) ?? _listingCategories[0];

                // add user to listing
                _listing.UserId = userSession.UserId;
                _listing.User = await ApiClient.GetByIdAsync<User>(userSession.UserId);

                List<ListingImage> images = new List<ListingImage>();
                if (_photoUrls.Count != 0)
                {
                    for (int i = 0; i < _photoUrls.Count; i++)
                    {
                        var tmpImage = new ListingImage()
                        {
                            ImageAsBase64 = _photoUrls[i],
                            Index = i,
                            DateAdded = DateTime.UtcNow,
                        };
                        images.Add(tmpImage);
                    }

                    _listing.ImagesBase64 = images;
                }               


                // add tags to listing
                if (!string.IsNullOrEmpty(_tagString))
                    _listing.TagString = _tagString.Trim();


                _listing.DateCreated = DateTime.UtcNow;

                // update data
                var response = await CreateListing(); // create the account

                if (response.IsSuccessStatusCode)
                    navManager.NavigateTo("/listings", true);
                else
                    errorMessage = response.ErrorMessage ?? "Something went wrong.";

                return;
            }
        }
        catch (Exception ex)
        {
            throw;
            errorMessage = ex.Message;
        }

        _processing = false;
        errorMessage = "Something went wrong.";
    }


    private async Task HandleImageSelected(IFileListEntry[] files)
    {
        if (_photoUrls.Count == 10)
        {
            errorMessage = "Maximum of 10 images allowed.";
            return;
        }

        var sourceFile = files.FirstOrDefault();

        if (sourceFile != null)
        {
            var imageFile = await sourceFile.ToImageFileAsync("image/jpeg", 800, 600);

            MemoryStream bytes = await imageFile.ReadAllAsync();
            var imageUrl = bytes.ToDataUrl("image/jpeg");

            _photoUrls.Add(imageUrl);
        }
    }




    private async Task AddImagesToDb(string[] imagesBase64, int listingId)
    {

        for (int i = 0; i < imagesBase64.Length; i++)
        {
                await ApiClient.CreateAsync<ListingImage>(new ListingImage()
                {
                    ListingId = listingId,
                    ImageAsBase64 = imagesBase64[i],
                    Index = i,
                    DateAdded = DateTime.UtcNow,
                });
        }
    }

    public async Task<RestResponse> CreateListing()
    {
        return await ApiClient.CreateAsync<Listing>(_listing);
    }   
}