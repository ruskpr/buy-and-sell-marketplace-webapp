@using Common;
@using Common.DTO;
@using Common.Helpers;
@using Newtonsoft.Json;
@using marketioBlazor.Authentication;
@using RestSharp;
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject ApiClientService ApiClient

<div>

    <div class="form-group">
        <label for="email">Email address</label>
        <input @bind="registerDTO.Email" type="text" class="form-control" id="email" placeholder="Enter email">
    </div>

    <div class="form-group">
        <label for="firstName">First name</label>
        <input @bind="registerDTO.FirstName" type="text" class="form-control" id="firstName" placeholder="John">
    </div>

    <div class="form-group">
        <label for="lastName">Last name</label>
        <input @bind="registerDTO.LastName" type="text" class="form-control" id="lastName" placeholder="Smith">
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <input @bind="registerDTO.PasswordHash" type="password" class="form-control" id="password" placeholder="Password">
    </div>

    <div class="form-group">
        <label for="confirmPassword">Confirm Password</label>
        <input @bind="registerDTO.ConfirmPasswordHash" type="password" class="form-control" id="confirmPassword" placeholder="Confirm Password">
    </div>

    <button type="submit" @onclick="HandleRegister" class="btn btn-primary my-3">
        Register
    </button>
    <br/>
    <label class="text-danger fw-bold">@message</label>
    <br/>
    <NavLink class="" href="login">
        Go to login page
    </NavLink>

</div>

@code {

    private string message = "";
    private RegisterDTO registerDTO = new RegisterDTO();
    private LoginDTO loginDTO = new LoginDTO();

    private async void HandleRegister()
    {
        try
        {
            ApiClient = new ApiClientService();
            var registerResponse = await ApiClient.RegisterUserAsync(registerDTO);

            message = registerResponse.Content ?? "";

            if (registerResponse.IsSuccessStatusCode)
            {
                loginDTO = new LoginDTO()
                {
                    Email = registerDTO.Email,
                    PasswordHash = registerDTO.PasswordHash,
                };
                await Authenticate();
                navManager.NavigateTo("/", true);
            }
            else if (registerResponse.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                message = registerResponse.Content;
            }
        }
        catch 
        {
            message = "Failed to register.";
        }
    }

    private async Task Authenticate()
    {
        ApiClient = new ApiClientService();
        var loginResponse = await ApiClient.LogUserInAsync(loginDTO);

        if (loginResponse.IsSuccessStatusCode)
        {
            try
            {
                var userSession = JsonConvert.DeserializeObject<UserSessionDTO>(loginResponse.Content);
                var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                await customAuthStateProvider.UpdateAuthenticationState(userSession);
            }
            catch
            {
                await js.InvokeVoidAsync("alert", "An error occured.");
            }

        }
        else
        {
            await js.InvokeVoidAsync("alert", loginResponse.Content);
        }
    }
    
}