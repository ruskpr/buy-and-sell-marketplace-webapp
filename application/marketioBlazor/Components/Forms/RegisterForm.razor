@using Common;
@using Common.DTO;
@using Common.Helpers;
@using Newtonsoft.Json;
@using marketioBlazor.Authentication;
@using RestSharp;
@using marketioBlazor.Components.UI
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject ApiClientService ApiClient

<EditForm Model="registerDTO" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    @*<ValidationSummary />*@

    <div class="form-group d-grid gap-2">
        @*email*@
        <label for="email">Email address</label>
        <InputText class="form-control" id="email" @bind-Value="registerDTO.Email" placeholder="someone@example.com" />
        <ValidationMessage For="@(() => registerDTO.Email)" />

        @*first name*@
        <label for="firstName">First name</label>
        <InputText class="form-control" id="firstName" @bind-Value="registerDTO.FirstName" placeholder="John" />
        <ValidationMessage For="@(() => registerDTO.FirstName)" />

        @*last name*@
        <label for="lastName">Last name</label>
        <InputText class="form-control" id="lastName" @bind-Value="registerDTO.LastName" placeholder="Smith" />
        <ValidationMessage For="@(() => registerDTO.LastName)" />

        @*password*@
        <label for="password">Password</label>
        <InputText class="form-control" id="password" @bind-Value="registerDTO.PasswordHash" placeholder="password" />
        <ValidationMessage For="@(() => registerDTO.PasswordHash)" />

        @*confirm password*@
        <label for="confirmPassword">Confirm Password</label>
        <InputText class="form-control" id="confirmPassword" @bind-Value="registerDTO.ConfirmPasswordHash" placeholder="confirm password" />
        <ValidationMessage For="@(() => registerDTO.ConfirmPasswordHash)" />

    </div>
    
    @*submit button*@
    <button type="submit" class="btn btn-outline-primary my-3">
        Register @*<Spinner />*@
    </button>

    <br/>

    @*error message display *@
    <label class="text-danger fw-bold">@errorMessage</label>
    
    Already have an account?
    <NavLink class="" href="login">
        Go to login page
    </NavLink>

</EditForm>

@code {
    private EditContext? editContext;
    private string errorMessage = "";
    private RegisterDTO registerDTO = new RegisterDTO();
    private LoginDTO loginDTO = new LoginDTO();

    protected override void OnInitialized()
    {
        editContext = new(registerDTO);
    }

    private async void HandleValidSubmit()
    {
        try
        {
            if (editContext != null && editContext.Validate())
            {
                await Register();
            }
            else
            {
                errorMessage = "Failed to register.";
            }
        }
        catch { }
    }

    public async Task Register()
    {
        ApiClient = new ApiClientService();
        var registerResponse = await ApiClient.RegisterUserAsync(registerDTO);

        errorMessage = registerResponse.Content ?? "";

        if (registerResponse.IsSuccessStatusCode)
        {
            loginDTO = new LoginDTO()
                {
                    Email = registerDTO.Email,
                    PasswordHash = registerDTO.PasswordHash,
                };
            await Authenticate();
            navManager.NavigateTo("/", true);
        }
        else if (registerResponse.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            errorMessage = registerResponse.Content;
        }
    }

    private async Task Authenticate()
    {
        ApiClient = new ApiClientService();
        var loginResponse = await ApiClient.LogUserInAsync(loginDTO);

        if (loginResponse.IsSuccessStatusCode)
        {
            try
            {
                var userSession = JsonConvert.DeserializeObject<UserSessionDTO>(loginResponse.Content);
                var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                await customAuthStateProvider.UpdateAuthenticationState(userSession);
            }
            catch
            {
                await js.InvokeVoidAsync("alert", "An error occured.");
            }

        }
        else
        {
            await js.InvokeVoidAsync("alert", loginResponse.Content);
        }
    }
    
}