@using Blazored.Modal;
@using marketioBlazor.Authentication;
@inject ApiClientService ApiClient
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject IToastService toastService

@if (reviewedUser != null && currentUser != null)
{
    
<div>
    <p>Rate your experience with @reviewedUser.FullName</p>

    <div class="d-flex fs-3 gap-3" style="text-align:center;">
        <div class="border" @onclick="()=> PostReview(1)">
            <i class="oi oi-star"></i>
            <p style="text-align:center;">1</p>
        </div>
        <div class="border" @onclick="()=> PostReview(2)">
            <i class="oi oi-star"></i>
            <p style="text-align:center;">2</p>
        </div>
        <div class="border" @onclick="()=> PostReview(3)">
            <i class="oi oi-star"></i>
            <p style="text-align:center;">3</p>
        </div>
        <div class="border" @onclick="()=> PostReview(4)">
            <i class="oi oi-star"></i>
            <p style="text-align:center;">4</p>
        </div>
        <div class="border" @onclick="()=> PostReview(5)">
            <i class="oi oi-star"></i>
            <p style="text-align:center;">5</p>
        </div>
    </div>

    <button class="btn btn-primary" @onclick="Close">Skip</button>
</div>

}

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter] public Transaction Transaction { get; set; }

    User reviewedUser;
    User currentUser;

    protected override async Task OnInitializedAsync()
    {
        var auth = (CustomAuthenticationStateProvider)authStateProvider;
        var userSession = await auth.GetToken();

        if (userSession == null)
        {
            navManager.NavigateTo("/login");
            return;
        }

        currentUser = Transaction.SellerId == userSession.UserId ? Transaction.Seller : Transaction.Buyer;
        reviewedUser = Transaction.SellerId == userSession.UserId ? Transaction.Buyer : Transaction.Seller;
    }

    public async void PostReview(int rating)
    {
        var review = new UserRating()
        {
            UserId = reviewedUser.Id,
            User = reviewedUser,
            Rating = rating,
            DateCreated = DateTime.UtcNow,
        };

        var res = await ApiClient.PostAsync<UserRating>(review);

        if (res.IsSuccessStatusCode)
        {
            toastService.ShowSuccess("You review has been saved anonymously!");
        }
        else
        {
            toastService.ShowError("An error occured.");
        }

        await Close();
    }

    private async Task Close() => await BlazoredModal.CloseAsync();
}