@using Blazored.Modal.Services;
@using Blazored.Modal;
@using marketioBlazor.Authentication;
@inject AuthenticationStateProvider authStateProvider
@inject ApiClientService ApiClient
@inject NavigationManager navManager
@inject IToastService toastService

@if (_loading)
{
    <span>Loading...</span>
}
else
{
<div class="d-flex position-relative border justify-content-between gap-2 flex-wrap rounded" style="cursor: pointer;">
    <div class="d-flex gap-3 flex-wrap p-3 w-100" @onclick="() => GoToConversation(Transaction.Id)">
        <div class="d-none d-sm-block">
        @if (Transaction.Listing.ImagesBase64.Count > 0)
        {
            <img width="120" class="rounded" src="@Transaction.Listing.ImagesBase64[0].ImageAsBase64"/>
        }
        else
        {
            <span>No image</span>
        }
            </div>
     <div @onclick="() => GoToConversation(Transaction.Id)" class="">
        <span class="text-decoration-none text-dark">
        <h5 class="mb-1">@Transaction.Listing.Title</h5>
                <h5 class="mb-1">@Transaction.Listing.PriceString</h5>
        </span>
        <span>
            @lastSender: <span class="fw-bold">@lastMessage </span>
        </span><br/>
            <span class="fw-bold">@lastMessageTime</span>
    </div>
    </div>
    <div class="">
        @if (Transaction.Completed)
        {
            <span class="d-flex gap-1 ps-2 py-1">
                Completed on: @Transaction.DateCompleted.Value.ToLocalTime().ToShortDateString()
                <i class="oi oi-check"></i>
            </span>
        }
        else
        {
            <div class="position-absolute end-0 top-0 p-2">
                <button class="btn btn-outline-primary rounded btn-sm py-1" @onclick="MarkAsComplete">Mark as completed</button>
            </div>
        }

        @if (_hasUnreadMessages)
        {
            <div class="position-absolute end-0 bottom-0 bg-danger badge rounded px-2 m-2">
                new message(s)
            </div>
        } 
        </div>
    </div>


}


@code {
    [Parameter] public Transaction Transaction { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }


    string usernameToDisplay = "";

    string lastMessage = "";
    string lastSender = "";
    string lastMessageTime = "";
    bool _loading = true;
    bool _hasUnreadMessages = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = (CustomAuthenticationStateProvider)authStateProvider;
        var userSession = await authState.GetToken();

        Transaction.Buyer = await ApiClient.GetByIdAsync<User>(Transaction.BuyerId);
        Transaction.Seller = await ApiClient.GetByIdAsync<User>(Transaction.SellerId);
        Transaction.Listing = await ApiClient.GetByIdAsync<Listing>(Transaction.ListingId);

        if (Transaction.SellerId == userSession.UserId)
        {
            usernameToDisplay = Transaction.Buyer.FullName;
        }
        else
        {
            usernameToDisplay = Transaction.Seller.FullName;
        }

        var messages = await ApiClient.GetMessagesByTransactionId(Transaction.Id);

        var sender = await ApiClient.GetByIdAsync<User>(messages.LastOrDefault().SenderId);
        lastSender = sender.FullName;
        lastMessage = messages.LastOrDefault().Content;

        var y = messages.LastOrDefault().DateSent.ToLocalTime().ToShortTimeString();
        var x = messages.LastOrDefault().DateSent.ToLocalTime().ToShortDateString();
        lastMessageTime = x + " " + y;

        _hasUnreadMessages = messages.ToList().Any(x => x.ReadByReceiver == false);

        _loading = false;


    }

    private void GoToConversation(int id)
    {
        navManager.NavigateTo($"/messages/{id}");
    }

    private async void MarkAsComplete()
    {

        var t = Transaction;
        t.Completed = true;
        t.DateCompleted = DateTime.UtcNow;
        var res = await ApiClient.PutAsync<Transaction>(t);

        if (res.IsSuccessStatusCode)
        {
            ShowModal();
            toastService.ShowInfo($"You marked '{Transaction.Listing.Title}' as completed.");
        }
        else
        {
            toastService.ShowError("An error ocurred.");
        }


        //navManager.NavigateTo("/messages");

    }

    private void ShowModal()
    {
        var parameters = new ModalParameters()
        .Add(nameof(ReviewModal.Transaction), Transaction);

        Modal.Show<ReviewModal>("Review", parameters);
    }
}