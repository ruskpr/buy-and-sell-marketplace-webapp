@using marketioBlazor.Authentication;
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject ApiClientService ApiClient

<div class="container navbar py-1 w-100">

    @* logo *@
    <a class="logo btn fs-4" href="">market.io</a>

    @* navigation menu icon *@
    <button title="Navigation menu" class="navbar-toggler border-0 d-block d-xl-none" @onclick="ToggleNavMenu">
        <i class="oi oi-menu fs-2"></i>
    </button>


    @* regular nav*@
    <nav class="@NavMenuCssClass " @onclick="ToggleNavMenu">
        @* home button link *@
        <div class="btn">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        @* listings page link *@
        <div class="btn">
            <NavLink class="nav-link" href="listings" Match="NavLinkMatch.All">
                <span class="oi oi-dollar text-success" aria-hidden="true"></span> Listings
            </NavLink>
        </div>

        @* messages page link *@
        <div class="btn">
            <NavLink class="position-relative nav-link" href="messages" Match="NavLinkMatch.All">
                <span class="oi oi-envelope-closed" aria-hidden="true"></span> Messages&nbsp;
            @if (_hasNotifications)
            {
                <i class="oi oi-bell position-absolute top-0 badge text-white bg-danger rounded-pill">&#8203;</i>
            }
            </NavLink>
        </div>
        @* profile link *@
        @if (userSession != null)
        {
        <div class="btn">
            <a class="position-relative nav-link" href="profile/@userSession.UserId" Match="NavLinkMatch.All">
                <span class="oi oi-person" aria-hidden="true"></span> Profile&nbsp;
                @if (_hasNotifications)
                {
                    <i class="oi oi-bell position-absolute top-0 badge text-white bg-danger rounded-pill">&#8203;</i>
                }
            </a>
        </div>
        }

        <AuthorizeView>
         
            @* show register & login for user that are not signed in *@
            <NotAuthorized>

                <div class="btn">
                    <NavLink class="nav-link" href="register">
                        <span class="oi oi-people" aria-hidden="true"></span> Register
                    </NavLink>
                </div>
                <div class="btn">
                    <NavLink class="nav-link" href="login">
                        <span class="oi oi-account-login" aria-hidden="true"></span> Login
                    </NavLink>
                </div>

            </NotAuthorized>

        </AuthorizeView>

        @* show admin link if user is admin*@
        <AuthorizeView Roles="Administrator">
            <div class="btn text-warning">
                <NavLink class="nav-link" href="admin">
                    <span class="oi oi-key" aria-hidden="true"></span> Admin
                </NavLink>
            </div>
        </AuthorizeView>

        <AuthorizeView>

            @* show register & login for user that are not signed in *@
            <Authorized>
                <div class="btn" @onclick="Logout">
                    <span class="oi oi-account-login"  aria-hidden="true"></span> Logout

                </div>
            </Authorized>

        </AuthorizeView>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "d-flex justify-content-center border-top w-100 flex-wrap" : "d-none d-xl-flex";

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private bool _hasNotifications = false;

    private UserSessionDTO userSession;

    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        userSession = await customAuthStateProvider.GetToken();

        if (userSession == null)
        {
            _hasNotifications = false;
            return;
        }

        //var res = await ApiClient.GetByIdAsync<User>(userSession.UserId);


    }

    private async Task Logout()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.LogoutUser();
        navManager.NavigateTo("/", true);
    }
}
