@using System.ComponentModel.DataAnnotations;
@using Newtonsoft.Json;
@using marketioBlazor.Authentication;
@inject IToastService toastService;
@inject ApiClientService ApiClient
@inject NavigationManager navManager;
@inject AuthenticationStateProvider authStateProvider

<EditForm Model="Message" OnValidSubmit="HandleValidSubmit" class="form-group d-flex gap-2">
    @*title*@
    <input class="form-control" id="message" @bind-value="Message" placeholder="message..." style="width: 300px;" />

    @* submit button *@
    <button class="btn btn-outline-dark flex-shrink-0" type="submit">
        <i class="bi-cart-fill me-1"></i>
        Message Seller
    </button>

</EditForm>

@code {
    @*
        1. Create a new transaction
        2. Send a message to the seller
        3. Redirect to the transaction detail page
    *@
    public string Message { get; set; } = "";

    private EditContext? editContext;

    private Transaction _transaction;

    [Parameter] public Listing Listing { get; set; }
    public int? BuyerId { get; set; }

    private bool isLoggedIn;

    protected override async Task OnInitializedAsync()
    {
        editContext = new(Message);

        // check for auth state
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var userSession = await customAuthStateProvider.GetToken();
        isLoggedIn = userSession != null;

        BuyerId = isLoggedIn ? userSession.UserId : null;
    }

    private async void HandleValidSubmit()
    {
        #region validation

        if (BuyerId == Listing.User.Id)
        {
            toastService.ShowWarning("This is your own listing.");
            return;
        }

        if (BuyerId == null) {
            toastService.ShowWarning("You must be logged in to message other users");
            return;
        }

        if (string.IsNullOrWhiteSpace(Message))
        {
            toastService.ShowWarning("Please enter a message");
            return;
        }

        #endregion

        var user = await ApiClient.GetByIdAsync<User>((int)BuyerId);

        // 1. Create a new transaction
        _transaction = new Transaction
        {
            ListingId = Listing.Id,
            Listing = Listing,
            BuyerId = (int)BuyerId,
            Buyer = user,
            SellerId = Listing.User.Id,
            Seller = Listing.User,
            DateCreated = DateTime.UtcNow,
            Completed = false,
            DateCompleted = null
        };

        // send to api
        var res = await ApiClient.PostAsync<Transaction>(_transaction);

        if (res == null)
            return;

        if (res.IsSuccessStatusCode)
        {
            // success
            // redirect to transaction detail page
            var t = JsonConvert.DeserializeObject<Transaction>(res.Content);

            var clientUser = await ApiClient.GetByIdAsync<User>((int)BuyerId);

            // create a message and post to api
            var message = new Message()
            {
                Content = Message,
                TransactionId = t.Id,
                Transaction = t,
                SenderId = clientUser.Id,
                Sender = clientUser,
                ReceiverId = Listing.User.Id,
                Receiver = Listing.User,
                DateSent = DateTime.UtcNow,
                ReadByReceiver = false
            };

            message.Transaction.Seller = Listing.User;
            message.Transaction.Buyer = clientUser;
            message.Transaction.Listing = Listing;

            await ApiClient.PostAsync<Message>(message);

            navManager.NavigateTo($"/messages/{t.Id}");
        }
        else
        {
            toastService.ShowError("An error occured.");
            return;
        }
    }
}