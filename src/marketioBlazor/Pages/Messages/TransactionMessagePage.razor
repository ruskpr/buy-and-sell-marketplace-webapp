@page "/messages/{Id:int}"
<PageTitle>market.io - Conversation</PageTitle>

@inject ApiClientService ApiClient
@inject NavigationManager navManager
@inject IToastService toastService
@inject AuthenticationStateProvider authStateProvider

@using marketioBlazor.Authentication;
@using marketioBlazor.Components.UI

<div class="container">

@if (_loading)
{
    <span>Loading messages...</span>
}
else if (_transaction != null)
{
    <div class="position-relative container py-5 px-0">
        <div class="card rounded">
            <div class="card-header d-flex justify-content-between flex-wrap flex-sm-nowrap align-items-center p-3">
                @if (_transaction.Listing.ImagesBase64.Count > 0)
                {
                    <img height="100" class="rounded" src="@_transaction.Listing.ImagesBase64[0].ImageAsBase64"/>  
                }
                <h5 class="mt-sm-0 mt-2 mb-0 ms-3">
                    <a href="/listings/@_transaction.Listing.Id">
                        @_transaction.Listing.Title</a><br/>
                    <span>@_transaction.Listing.PriceString</span><br/>
                    <span class="fw-light">Posted by: @_transaction.Seller.FullName</span>
                </h5>
            </div>
            <div class="card-body" data-mdb-perfect-scrollbar="true" style="position: relative; height: 100%">
                    @foreach(var msg in _messages)
                    {
                        <MessageBubble Message="msg" IsCurrentUser="msg.SenderId == _userSession.UserId" />
                    }
            </div>
            <div class="card-footer">
                <EditForm class="d-flex" Model="_messageText" OnSubmit="SendMessage">
                    <InputText @bind-Value="_messageText" class="form-control rounded-start border" placeholder="message..." />
                    <button class="btn btn-primary rounded-end">Send</button>
                </EditForm>
            </div>
        </div>

    </div>
}

</div>


@code {
    [Parameter]
    public int Id { get; set; }

    public Transaction _transaction;

    private List<Message> _messages = new List<Message>();

    private string _messageText = "";

    private UserSessionDTO? _userSession;

    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = (CustomAuthenticationStateProvider)authStateProvider;
        _userSession = await authState.GetToken();

        if (_userSession == null)
        {
            navManager.NavigateTo("/login");
            return;
        }

        _transaction = await ApiClient.GetByIdAsync<Transaction>(Id);
        if (_transaction == null)
        {
            navManager.NavigateTo("/error");
            _loading = false;
            return;
        }

        _transaction.Buyer = await ApiClient.GetByIdAsync<User>(_transaction.BuyerId);
        _transaction.Seller = await ApiClient.GetByIdAsync<User>(_transaction.SellerId);
        _transaction.Listing = await ApiClient.GetByIdAsync<Listing>(_transaction.ListingId);


        if (_userSession.UserId != _transaction.SellerId && _userSession.UserId != _transaction.BuyerId)
        {
            navManager.NavigateTo("/error");
            _loading = false;
            return;
        }


        // update message to read
        var messages = await ApiClient.GetMessagesByTransactionId(_transaction.Id);
        _messages = messages;
        var tmpMessages = _messages;


        foreach (var msg in tmpMessages)
        {
            msg.Sender = await ApiClient.GetByIdAsync<User>(msg.SenderId);
            msg.Receiver = await ApiClient.GetByIdAsync<User>(msg.ReceiverId);
            msg.Transaction = await ApiClient.GetByIdAsync<Transaction>(msg.TransactionId);
            msg.Transaction.Buyer = await ApiClient.GetByIdAsync<User>(msg.Transaction.BuyerId);
            msg.Transaction.Seller = await ApiClient.GetByIdAsync<User>(msg.Transaction.SellerId);
            msg.Transaction.Listing = await ApiClient.GetByIdAsync<Listing>(msg.Transaction.ListingId);

            if (msg.ReceiverId == _userSession.UserId && msg.ReadByReceiver == false)
            {
                msg.ReadByReceiver = true;
                await ApiClient.PutAsync(msg);
            }
        }


        _loading = false;
    }

    private async void SendMessage()
    {
        if (_transaction.Completed)
        {
            toastService.ShowWarning("This transaction has been marked as complete.");
            return;
        }

        if (_userSession == null)
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(_messageText))
        {
            toastService.ShowWarning("Enter a message.");
            return;
        }

        var currentUser = await ApiClient.GetByIdAsync<User>(_userSession.UserId);
        if (currentUser is null) return;


        var receiver = currentUser.Id == _transaction.SellerId ? _transaction.Buyer : _transaction.Seller;
        var message = new Message
        {
            Content = _messageText.Trim(),
            TransactionId = _transaction.Id,
            Transaction = _transaction,
            SenderId = _userSession.UserId,
            Sender = currentUser,
            ReceiverId = _transaction.SellerId,
            Receiver = receiver,
            DateSent = DateTime.UtcNow,
            ReadByReceiver = false,
        };

        await ApiClient.PostAsync<Message>(message);

        if (_messages != null)
        {
            _messages.Add(message);
            _messageText = "";
        }
        StateHasChanged();
    }

}

